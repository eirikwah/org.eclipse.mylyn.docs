h1. Introduction

p. There are several ways of assembling EPUBs: You can write the document in Apple's __Pages__ and directly export to EPUB. You can write it in Microsoft's __Word__ and convert it to EPUB using "EPUBGen":http://code.google.com/p/epub-tools/, in DocBook and convert it using "docbook2epub":http://code.google.com/p/epub-tools/ or even manually assembling the publication using various command line tools. The popular Calibre eBook tool can also be used to create a number of formats. All these methods have their merits but few can be easily used to assemble publications during a __continuous build__ and none can be used without adding a few extra dependencies such as Ruby or Python. 

p. Hence the primary goal of the EPUB support in Mylyn Docs is to create a mechanism that allows consistent building of EPUB files adhering to all relevant standards, using ANT tasks, while introducing as few dependencies as possible (only Java and parts of Eclipse). The secondary goal is to create an API that can be used for manipulating EPUBs. For instance loading an existing publication and altering it's contents or metadata. This book describes how one can use the ANT task to assemble publications.

p. The EPUB support in Eclipse is built around a data model describing the publication along with various mechanisms to manipulate this structure and assemble a EPUB file. The model is expressed in "Ecore":http://wiki.eclipse.org/Ecore, representing the "Open Packaging Format (OPF)":http://idpf.org/epub/20/spec/OPF_2.0.1_draft.htm, a subset of Dublin Core and the Navigation Control File (NCX). All required parts of a properly assembled EPUB file following the 2.0.1 revision of the standard.

p. The mechanisms mentioned is an API for handling the EPUB and a Ant task that can be used during building. The following code shows the minimum Ant script required to generate a publication.

bc.. 
<epub file="my_book.epub">
	<title text="My book" />
	<subject text="My book's subject"/>
	<item file="my_chapter.html"/>
</epub>

p. Some of the fields required by will be automatically created and added to the publication when not specified in the Ant script. The table of contents will for instance be automatically created, the language set to __en__ for "English" and an identifier (based on UUID) will be generated. Details can be found in the chapter describing the "epub":epub-ant-task.html Ant task.

h2. Learning more

If you would like to learn more about building EPUBs you may want to take a look at following resources:

* Elizabeth Castro: EPUB Straight to the Point - ISBN: 9780132366984
* International Digital Publishing Forum: "EPUB":http://idpf.org/epub
* Liza Daly: "Build a digital book with EPUB":http://www.ibm.com/developerworks/xml/tutorials/x-epubtut/index.html
* Harrison Ainsworth: "Epub Format Construction Guide":http://www.hxa.name/articles/content/epub-guide_hxa7241_2007.html

h2. The EPUB file format

p. The __EPUB file format__ is basically a ZIP-file with a defined set of contents. The first file in the container is a file by the ASCII name of "mimetype" which holds the MIME type for the ZIP container. This file must be treated a bit special as the contents are defined and the file must not be compressed, nor encrypted and there must be no extra fields in it's ZIP header. 

p. The EPUB also have a META-INF folder that contains a file named __container.xml__. This declares the format of the publication and points to the main entry: __content.opf__. If there is a table of contents (__toc.ncx__) the main entry will point to it. 

!Illustrations.002.jpg(Contents of a example EPUB container.)! 

The illustration shows the contents of an example publication. The marked files and folders marked are ones created by the EPUB tooling.